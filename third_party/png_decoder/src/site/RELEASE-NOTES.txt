PNGJ:  Release Notes  & History
==============================================================================

Version 2.1.1 
  - Support for java.awt.BufferedImage efficient read/write (see ar.com.hjg.pngj.awt.* package)
  Experimental, but already quite functional and tested.
  - Some APNG support: 
    -- PngReaderApng: supports practically all the APGN standard (but it's low level, it doesn't do the frames composition)
    -- ApngTests: unit tests and examples 
  - Reader: Several minor issues fixed and changes in architecture to prepare for APNG. 
    -- PngReader.readRows() does not call end() anymore 
    -- Pngreader by default skips fdAT and fctl  
    -- PngReader (and ChunkSeqReaderPng) now has a getCurImgInfo() (same as imgInfo, but can vary if reading APNG)
    -- ChunkSeqReaderPng.updateCurImgInfo() updates the current frame properties (and reset the deinterlacer)
    -- ChunkSeqReaderPng.countChunkTypeAsAncillary() by default does not count the fDAT (by default skipped) as ancillary bytes
    -- ChunkSeqReaderPng.dontSkipChunk() added, to ease toggle of chunks skip behaviour
    -- DeflatedChunkReader knows how to treat fDAT chunks
  - ImageLineSet factory now uses the respective ImageLine factory.
  - Fixed old issue with PngReader.readRows() : it allocated a full rowset even when a subset was specified.
  - Several fixes and API clarification regarding BufferedReader and consumers  
  - Cli script: ExtractIdat (separated  ChunkSeqReaderIdatRaw)
  - Cli script: ApngExtractFrames : extracts APNG frames (low level)
  - PngWriter optimization:  IdatChunkWriter replaces PngIdatChunkOutputStream. this saves one unnecessary copy
  - Fixed redundant copy in ImageLineByte.writeToPngRaw()
  - Some issues fixed: PixelsWriterMultiple.initParams()
  - Some utility methods added to PngChunrTRNS, PngChunkTEXT
  
Version 2.1.0 (5/May/2014)
----------------------------------------------------------------------
Many improvements, specially in PngWriter filtering strategies
 - PngWriter changes, mostly backwards compatible. More work to optimize the news strategies is required.
   -- The writing of pixels (IDAT, eventually fDAT) is delegated to  PixelsWriter (abstract) that 
    knows how to filter and decides the filtering strategy (the implementation) 
   -- A default implementation PixelsWriterDefault supports the most usual filtering strategies:
    fixed filter, uniform default based on image properties, and adaptive
   -- Several adaptive filtering strategies with different speed-performance compromise
    (FILTER_ADAPTIVE_FAST FILTER_ADAPTIVE_MEDIUM FILTER_ADAPTIVE_FULL). This could change in later versions
   -- PixelWriterMultiple implements new "super adaptive" strategy with compression estimated on the fly,
    in row bands, with Deflater or a pseudo LZ4 compressor. Experimental. Added PngWriterHc
   -- Old pseudo FilterType names FILTER_AGGRESSIVE.. deprecated (provisional)
 - Several improvements and fixes to PngReader and related classes.  ChunkSeqReaderOpaque added
 - Fixed-clarified PngReader constructor: shouldCloseStream is true by default. 
 - Added method PngReader.toStringCompat(), useful for scripting
 - New RemoveChunks with better performance, takes advantage of new ChunkSeqReaderOpaque class
 - ImageLineByte now includes an extra byte array to deal with 16bpp images with no loss. Only allocated if necessary
 - Removed recursion in DeflatedChunkSet.inflateData(), could lead to SO, and it was clumsy [5a076d59c78997ad2a]
 - Revised and fixed behaviour close()/end(). Now close() is (as with AutoClosable) the
   standard (secure, no exceptions, idempotent) method that finalizes the object and releases
   its resources. Its getters might be still be usable, but the object is now freezed. See issue #3
 - Fixed bug #27 with NPE with chunk invalidate() method. removed PngChunk.cloneForWrite [bc990dfebdbfd1272e6]
 - Added CLI package for command line sample - utilities programs. Included:
     RecompressIdat, DetectDuplicates, ShowFilterInfo, ShowPngInfo, RemoveChunks
 - Removed ThreadLocal Inflater instance. Irrelevant optimization, it caused problems with Android. [366d68aef38e39873f5]     
 - Pseudo-64 digest in PngReader, useful for detecting duplicates or modifications at the pixel level.
 - Added pdf with classes hierarchy.  [5a076d59]
 - Updated Java formatting style, GoogleStyle based, included in project  [dc89a8efb0ae1b3] 

Version 2.0.1 (9/Aug/2013)
----------------------------------------------------------------------
  - Internal directory layout change (pom.xml on root)
  - Uploaded to Maven central repository via OSS Sonatype 
   https://oss.sonatype.org/content/repositories/releases/ar/com/hjg/pngj/

Version 2.0.0 (July 2013)
----------------------------------------------------------------------
Lots of improvements and changes,  some backward incompatible. 
 - PngReader was heavily rewritten.
  --  New architecture: PngReader was a "God object" antipattern, it was 
     difficult to extend or customize. Now we have a much more flexible 
     and layered design. PngReader now is rather a high-lever wrapper 
     over a ChunkSeqReaderPng 
  -- Async/Non-blocking reader: Allows to read an image via callbacks, 
     asynchronously. Also allows to use instantiate a InputStreamFilter 
     so that PNGJ stays in the middle of a PNG reader from other client. 
     See an example in PngFilterStreamTest
  -- The old ImageLine, which started as a wrapper over a int[] array, 
     was difficult to extend. In particular, we wanted to provide alternate 
     storage or source/destination for the pixel data (eg: a BufferedImage 
     or a Android Bitmap), and we wanted to do that transparently and 
     efficiently (no unnecessary data copies). We have that now.
  -- The deinterlacer is now a more efficient and more elegantly coupled 
     with alternate pixel storage.
  -- The unpack of pixels (from packed formats) is now done always.   
 - Changes in PngWriter
  -- Instead of the two (clumsy) calls to copyFirstChunks/copyLastChunks, 
     now we need to make a single call to copyChunksFrom() This changes 
     a little the semantics of how chunks are queued, for the better.
  -- The filter strategy logic is a little better, both in perfomance and 
     in extensibility (FilterWriteStrategy). More work is needed.
    (Thanks Andrea Aime <andrea.aime@geo-solutions.it> ) 
 - The PngFileHelper static methods for creating PngReader/PngWriter were 
     removed. The made little sense, really. Use the new plain constructors.
 - Chunks:
  -- Several performance improvements for ancilary chunks. Direct copy 
    (without deserialization+serialization) is possible.
  -- New Chunk Factory, more flexible and without reflection 
    (Thanks marcin.mikosik@gmail.com for idea)
     See CustomChunkTest for example.
 - Migrating to Maven
   -- New project layout
 - Fixed Java 1.5 compatibility (thanks David Burnett <daviburn@gmail.com>)    
 - Many new and better organized unit tests       
 - Better javadocs  
  
========================================================================================

Version 1.1.5? (?)  
------------------------------------------------------
    - PngReader.reuseBuffersFrom() - supports bigger-than-needed buffers
    - PngHelperInternal.skip() now doesn't allocate buffer now
    - Small efficiency improvement in FilterType.getByVal
    
Version 1.1.2 (3 Dec 2012)   
---------------------------
   - Fix silly bug that in PngIDatChunkInputStream that caused errors with readSkippingAllRows() for small files 

Version 1.1.1 (2 Dec 2012)   
---------------------------
   - Added ImageLines to wrap the matrix that returns readRows() This is more consistent and makes some code more compact and elegant 
   
Version 1.1 (1 Dec 2012)   
---------------------------
   - Interlaced PNG: full support for reading.
   - Read/write can use INT or BYTE for sample storage now. The choice is explicit by the programmer
      -- ImageLine have a "sampleType" and two buffers scanline (integer) and scanlineb (byte), only one is allocated
      -- readRow/writeRow methods can specify the concrete type: readRowInt/readRowByte writeRowInt/writeRowByte   
   - packed formats (bit depth 1-2-4) can now be unpacked on the fly when reading/writing  See eg PngReader.setUnpackedMode()s
   - Several retouchings in PngReader. readRow can skip rows (getRow is deprecated now), and does it 
    more efficiently (does not decode more than necessary)
   - Read/Write can work with a set of lines: readRows writeRows, returns a matrix
      -- This is not a mere alias to a loop of readRow, and it's much efficient for interlaced PNG
   - PngReader.readSkippingAllRows allows to skip entirely the pixel data, very efficiently
   - Much extensive and robust tests:
     -- added crctest and PngReaderTest to implement better tests (internal use only)
     -- PngSuiteTest does a double mirror of each image an compares with original (even with interlaced)
   - ImageLineHelper.pal2rgb  (renamed, corrected, supports alpha if TRNS passed). Added to TestSuite
   - Added getMetadata().getPalette() getMetadata().createNewPalette()
   - Corrected several issues with textual chunks (texts with null bytes, empty texts). Added test.
   - Exception handling polished : PngExceptionInternal added, no more plain RuntimeException thrown 
   - Lots of polishing and reordering of extra packages: lossy experimental package removed, new samples and tests

Version 1.0 (?)
---------------------------
   [Not released. The version numbering can now be put in sync with the sibling project PngCS]
              
Version 0.97 (?)
---------------------------
  - Corrected typo in PngWriter: getChunkList() -> getChunksList()  
    
Version 0.96 (21 Oct 2012) 
---------------------------
  - Fixed issue: PngWriter.init() not internally called when not passing row number
  - Fixed bad format in PngChunkTIME (thanks harvey.harrison) 
  - setMaxXXX() methods now accept zero, meaning unlimited (eg  PngReader.setMaxTotalBytesRead(0) = no limit)
  - PngHelper.getPngIdSignature is public now
  
Version 0.95 (14 Aug 2012) 
---------------------------
  - Little stupid bug with PngReader,  maxTotalBytesRead was not really checked
  
Version 0.94 (12 Aug 2012) 
---------------------------
  - Defensive limits and related tuning in PngReader 
   -- Added: maxTotalBytesRead (200MB), maxBytesMetadata (5MB), skipChunkMaxSize (2MB) skipChunkIds ( "fdAT" )
   -- APGN is now "rightly unsupported" :-)
   -- PngChunkSkipped : now skipped chunks are really skipped (never loaded in memory)  All skipped chunks (for any criteria) are loaded in ChunksLists as a PngChunkSkipped
   -- Several related polishing in PngReader (parseChunkAndAddToList() removed, readChunk() added)
	 -- 'offset' added in chunks (mainly informational)
	 -- 'offset' in PngReader: now a long (to support greater than 2GB files), updated and checked against maxTotalBytesRead
  - Added sample: SampleCustomChunk , shows how to register a custom chunk	    
  - Some fixes for very huge (more than 2GB) files - sample: CreateVeryHuge.java
  
Version 0.93 (22 June 2012) 
---------------------------
  - PngReader.getRow() allows non sequential reading  (useful for skipping lines)
  - PngReader.end() is no longer deprecated but recommended (related to the previous)
  - some more polishing and some renaming: ImageLine.tf_pack -> ImageLine.pack (what was I thinking?), FilterType.ALTERNATE -> CYCLIC
  - ImageLine.pack()/ ImageLine.unpack() was requiring/returning a buffer of length greater than cols*nchannels - fixed
  - Added PngWriter.computeCompressionRatio() 
  - Added a Neural Network Color Quantizer in test package, see SampleConvertPalette for example of use

Version 0.91  (?)
---------------------------
  - Added 2 chunks from Extensions to the PNG 1.2 Specification: sTER and oFFs
  - Added PngChunks.factoryRegister() and some other minor chunks changes ( PngChunkXXX.ID) 
  - Some polishing of test package -  renamed sample classes to Sample* - added TestSpeed to compare with C# port
  - PngReader emits warning (and ignores more chunk data) instead of dying when too much bytes in chunks
  - Some chunks polishing and internal methods  added reorganized 

Version 0.9  (14 April 2012)
---------------------------
  - Chunks API reorganization: PngChunkMultiple/Single, ChunksListForWrite, ChunkPredicate...
  - ChunksListForWrite.getQueuedById and similar methods
  - PngReader.end() no more necessary: it's called automatically after reading the last row
  - PngWriter: user can set idatMaxSize (default increased to 32K)
  - Small optimizations in PngWriter
  - PngHelper -> PngHelperInternal
 
Version 0.85  (1 April 2012)
---------------------------
 - More robust Chunk management (ChunkGroup is now inside PngChunk; both PngReader and PngWriter have a ChunkList...)    
 - PngMetadata: both  PngReader and PngWriter have an instance to deal with metadata (chunks) at high level. eg: setDpi()/getDpi 
 - Added sPLT chunk
 - The test of all testsuite images now copies all chunks ok.
 - Deprecated Pngwrite.writeRow(ImageLine), use better Pngwrite.writeRow(ImageLine,rown)
 - remove PngReader.foundChunksInfo 
  
Version 0.80  (28 March 2012)
---------------------------
 - Roll back auto increment of ImageLine rownumber at writing. Define some new PngWrite.writeLine() methods with slight change in semantics  
 - Fix bad chunk-id in PngChunkITXT
 
Version 0.71  (March 2012)
---------------------------
 - Full support for all Chunk types (bKGD CHRM ICCP ITXT TRNS ZTXT - some yet untested)  
 - ar.com.hjg.pngj.nosandbox is now empty: PngFileHelper is back to main jar
 - Lossy compression ar.com.hjg.pngj.lossy - (very EXPERIMENTAL yet, undocumented, lots of rough edges) 

Version 0.62  (Jun 2011)
-----------------------
- Added Javadocs
- Implemented ImageLineHelper.tf_palIdx2RGB()
- Several code and comment polishing

Version 0.61  (Jun 2011)
-----------------------
- Better PNG filter strategies (different filters in same writer).
- Fixed issue with compression level (zip stream), it had no effect before.
- More chunks implemented (cHRM  , sRGB , sBIT)
- Restricted visibility of some methods/fields

Version 0.6  (May 2011)
-----------------------
- Full support for indexed and grayscale, with  any bitdepth 
- The only non supported PNG images are the interlaced now.
- Chunk management fully reimplemented. (package ar.hjg.com.png.chunks)
- Decouple google-appengine-unfriendy code in package   
 ar.com.hjg.pngj.nosandbox package. See PngFileHelper.
- Constructors PngReader/PngWriter now use streams. See factory methods 
in ar.com.hjg.pngj.nosandbox.PngFileHelper if you want to use files.
- Added test images from PNG suite - see MirrorTest
- Polished code, translated some spanish comments 

Version 0.2  (Apr 2011)
-----------------------
- Issue with extra trailing IDAT chunks fixed.  

Version 0.1  (January 2009)
---------------------------
- Full reading/writing capabilities for truecolor formats: RGB/RGBA , 8 and 16 bpp
- Other formats: paletted and grayscale images implemented (almost no testing), 
only with 8bitdepth resolution (1,2,4 bits not implemented). 
- Palette handling: very rudimentary: PngReader only reads the raw chunk and 
PngWriter -if applicable- writes it back.
- Special color transformations (ICC) : unvisible for the API. The chunks are
read and write 'raw'. 
- Special chunks: limited support for Physical resolution (DPI) and textual chunks.
All other ancillary chunks are blindly read and write.


Feedback:
--------

http://code.google.com/p/pngj

Hernan J. Gonzalez
hgonzalez@gmail.com
